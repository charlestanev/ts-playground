// // –ó–∞–¥–∞—á–∞ 1
// // –°—ä–∑–¥–∞–π—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ–π—Ç–æ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ—Ç–æ –Ω–∞ –æ–±–µ–∫—Ç –æ—Ç –¥–∞–¥–µ–Ω
// // –∫–ª–∞—Å –∏–∑–≤–µ–∂–¥–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω–∑–æ–ª–∞—Ç–∞.

// function logClassCreation(constructor: Function) {
//     console.log(`–ö–ª–∞—Å—ä—Ç ${constructor.name} –±–µ—à–µ —Å—ä–∑–¥–∞–¥–µ–Ω.`);
// }

// @logClassCreation

// class User {
//     constructor(public name: string) { }
// }
// const user1 = new User('Ivan')






// // –ó–∞–¥–∞—á–∞ 2 –ó–∞–¥–∞—á–∞ 2: –°—ä–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å–æ–≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä,
// // –∫–æ–π—Ç–æ –¥–æ–±–∞–≤—è –Ω–æ–≤–æ —Å—Ç–∞—Ç–∏—á–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ –∫—ä–º –∫–ª–∞—Å–∞.

// function addStaticProperty(constructor: Function) {
//     (constructor as any).category = 'General';
//     console.log(`–î–æ–±–∞–≤–µ–Ω–æ –µ —Å—Ç–∞—Ç–∏—á–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ 'category' —Å—ä—Å —Å—Ç–æ–π–Ω–æ—Å—Ç 'General'.`);
// }

// @addStaticProperty

// class Product {
//     constructor(public name: string) {

//     }
// }

// console.log((Product as any).category);





// // üü† –ó–∞–¥–∞—á–∞ 3: –°—ä–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å–æ–≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ–π—Ç–æ –±—Ä–æ–∏ –∫–æ–ª–∫–æ –æ–±–µ–∫—Ç–∞ –æ—Ç –¥–∞–¥–µ–Ω –∫–ª–∞—Å —Å–∞ —Å—ä–∑–¥–∞–¥–µ–Ω–∏.
// interface Constructable {
//     new(...args: any[]): any;
// }

// function countInstances(constructor: Constructable) {

//     (constructor as any).instanceCount = 0;

//     const originalConstructor = constructor;

//     const newConstructor: Constructable = class extends originalConstructor {
//         constructor(...args: any[]) {
//             super(...args);
//             (constructor as any).instanceCount++;
//         }
//     };

//     return newConstructor;
// }

// @countInstances
// class Order {
//     constructor(public id: number) { }
// }

// const order1 = new Order(1);
// const order2 = new Order(2);
// console.log((Order as any).instanceCount);





// // –ó–∞–¥–∞—á–∞ 4: –°—ä–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å–æ–≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ–π—Ç–æ –¥–æ–±–∞–≤—è –º–µ—Ç–æ–¥ greet() —Å —Ñ–∏–∫—Å–∏—Ä–∞–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ.
// function addGreetMethod(constructor: Function) {
//     (constructor as any).prototype.greet = function () {
//         console.log("–ó–¥—Ä–∞–≤–µ–π—Ç–µ! –¢–æ–≤–∞ –µ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä.");
//     }
// }

// @addGreetMethod
// class Customer {
//     constructor(public name: string) { }
// }

// const customer = new Customer('–ü–µ—Ç—ä—Ä');
// (customer as any).greet();





// // –ó–∞–¥–∞—á–∞ 5:
function myClassDecorator(constructor: Function) {
    console.log('–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ä—Ç –Ω–∞ –∫–ª–∞—Å–∞ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω');
    constructor.prototype.newProperty = '–ù–æ–≤–æ —Å–≤–æ–π—Å—Ç–≤–æ';
}

@myClassDecorator
class MyClass {
    constructor() {
        console.log('–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ä—Ç –Ω–∞ –∫–ª–∞—Å–∞ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω');
    }
}

const instance = new MyClass();
console.log((instance as any).newProperty);

























// –ó–∞–¥–∞—á–∞ 10
// –£—Å–ª–æ–≤–∏–µ:
// –°—ä–∑–¥–∞–π—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ–π—Ç–æ –ø—Ä–∏ –∏–∑–≤–∏–∫–≤–∞–Ω–µ—Ç–æ –Ω–∞ –º–µ—Ç–æ–¥ –∏–∑–≤–µ–∂–¥–∞ —Å—ä–æ–±—â–µ–Ω–∏—è
// "–ó–∞–ø–æ—á–Ω–∞ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ—Ç–æ –Ω–∞ –º–µ—Ç–æ–¥ X" –∏ "–ó–∞–≤—ä—Ä—à–∏ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ—Ç–æ –Ω–∞ –º–µ—Ç–æ–¥ X".

// function logMethod(target: any, methodName: string, descriptor: PropertyDescriptor) {
//     const originalMethod = descriptor.value;

//     descriptor.value = function (...args: any[]) {
//         console.log(`–ó–∞–ø–æ—á–≤–∞ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ—Ç–æ –Ω–∞ –º–µ—Ç–æ–¥–∞ "${methodName}"`);
//         const result = originalMethod.apply(this, args);
//         console.log(`–ó–∞–≤—ä—Ä—à–∏ –º–µ—Ç–æ–¥—ä—Ç: ${methodName}`);
//         return result;
//     }

//     return descriptor;
// }

// class Calculator {

//     @logMethod

//     add(a: number, b: number): number {
//         return a + b
//     }
// }

// const calc = new Calculator();
// calc.add(5, 3); 